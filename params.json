{
  "name": "Uwsgi-nginx-flask-docker-for-sinaimg",
  "tagline": "Click here to see if it's working.",
  "body": "Short anwser:\r\n```\r\nhttp://ww1.sinaimg.cn/large/863bb56fgw1f3r5e627m9g20jg08cwej.gif\r\n\r\n->\r\n\r\nhttps://sinaimg.daoapp.io/ww1.sinaimg.cn/large/863bb56fgw1f3r5e627m9g20jg08cwej.gif\r\n```\r\n<!-- more -->\r\n俗话说得好——\r\n> 围脖是个好图床\r\n\r\n新浪图床作为最优秀的免费图床深得广大群众的喜爱，并一直作为[V站](https://v2ex.com)指定图床。在我全站上HTTPS之前，这也一直是我的首选。由于新浪图床的HTTPS证书是自己签发的SHA-1证书，而且根据不同的节点有不同的证书，浏览器都不信任，所以现在我在网站上已经对它放弃。\r\n![部分地区显示这是铁道部签的证书（╯‵□′）╯︵┴─┴](https://sinaimg.daoapp.io/ww3.sinaimg.cn/large/863bb56fgw1f3s0cnvfapj21920umk16.jpg)\r\n直到我转念一想，我做个HTTPS代理不就好了嘛♪(^∇^*)。由于最近比较迷恋Docker，所以打算就用它来解决问题，同时还想复习一下Flask。说到这种代理Flask是有官方代码示例的-[Stream Proxy with Requests](http://flask.pocoo.org/snippets/118/)\r\n```Python\r\n# -*- coding: utf-8 -*-\r\n    \r\nfrom flask import Flask\r\nfrom flask import Response\r\nfrom flask import stream_with_context\r\n\r\nimport requests\r\n\r\napp = Flask(__name__)\r\n\r\n@app.route('/<path:url>')\r\ndef home(url):\r\n    req = requests.get(url, stream = True)\r\n    return Response(stream_with_context(req.iter_content()), content_type = req.headers['content-type'])\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n```\r\n这块代码一笔不用动就能直接用，但是我发现主要有两个问题。\r\n- 需要手动添加白名单，我可不想什么资源都能通过代理\r\n- Flask自带模块stream_with_context的性能太差，图片加载太慢\r\n\r\n所以并不能用现成的，那就自己动手撸个小轮子。对于流媒体传输当然是要分块来做！所以就想到chunk，再用正则表达式匹配一下URL是否来自微博图床就可以大功告成咯。正则匹配非常简单用match匹配`ww[0-9]\\.sinaimg.cn\\/`搞定，这里有[一个非常好用的正则调试工具](https://regex101.com/#python)，最后再用`errorhandler`应对一下报错，成品如下：\r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom flask import Flask, Response, redirect\r\nimport requests\r\nimport re\r\n\r\napp = Flask(__name__)\r\napp.debug = False\r\nCHUNK_SIZE = 2048\r\n\r\n@app.route('/<path:url>')\r\ndef proxy(url):\r\n    if not re.match(r'ww[0-9]\\.sinaimg.cn\\/', url):\r\n        url = \"ww3.sinaimg.cn/large/images/default_large.gif\"\r\n    r = requests.get(\"http://\"+url, stream=True)\r\n    def generate():\r\n        for chunk in r.iter_content(CHUNK_SIZE):\r\n            yield chunk\r\n    return Response(generate(), headers = r.raw.headers.items())\r\n\r\n@app.errorhandler(404)\r\ndef page_not_found(e):\r\n\treturn redirect(\"https://yux.io\")\r\n\r\n@app.errorhandler(500)\r\ndef internal_server_rror(e):\r\n\tr = requests.get(\"http://ww3.sinaimg.cn/large/images/default_large.gif\", stream=True)\r\n\tdef generate():\r\n\t\tfor chunk in r.iter_content(CHUNK_SIZE):\r\n\t\t\tyield chunk\r\n\treturn Response(generate(), headers = r.raw.headers.items())\r\n\r\nif __name__ == '__main__':\r\n    app.run()\r\n```\r\n逻辑部分还算简单，下面开始部署。前面已经说了这次要用Docker，所以就要写个Dockerfile。\r\nDocker的好处根本说不完，这次先说一个就是对于二次开发非常友好，每个开发者都能充分继承上一个开发者的代码再加上自己的修改。Flask掌管的微型服务器需要搭配一些中间件才能正常使用。这么常用的部分当然有人早就写好了，所以上来我先把tiangolo的[uwsgi-nginx](https://github.com/tiangolo/uwsgi-nginx-docker)拖下来，然后 `RUN pip install flask `  `RUN pip install requests`然后拷贝代码就好啦。\r\nDockerfile\r\n```Dockerfile\r\nFROM tiangolo/uwsgi-nginx:latest\r\n\r\nMAINTAINER YUX <yu.xiao.fr@gmail.com>\r\n\r\nRUN pip install flask\r\nRUN pip install requests\r\n\r\n# Add app configuration to Nginx\r\nCOPY nginx.conf /etc/nginx/conf.d/\r\n\r\n# Copy sample app\r\nCOPY ./app /app\r\n```\r\nNGINX配置文件\r\n```nginx.conf\r\nserver {\r\n    location / {\r\n        try_files $uri @app;\r\n    }\r\n    location @app {\r\n        include uwsgi_params;\r\n        uwsgi_pass unix:///tmp/uwsgi.sock;\r\n    }\r\n    location /static {\r\n        alias /app/static;\r\n    }\r\n}\r\n```\r\n既然准备工作都做好了，那么接下来开始部署。自己手上国内只有一个阿里云一个美团云，主机分别位于杭州和北京，在国内延迟就很低一般40ms左右。但都是小水管1M带宽肯定撑不起一波一波图片流。境外的主机延迟就高了，基本上在300ms左右，但是水管大都有1G带宽。如果对于大量来自国内的请求带宽上的优势肯定更加明显，我也在美团云和HostUS洛杉矶做了一下实验，HostUS完胜。当初我想做这件事的时候我就希望它是一个持久的公共服务，使命是与微博图床同在。这样的服务放在自己的服务器上感觉并不太妥，所以想到国内无比良心的企业DaoCloud。部署在DaoCloud的项目分配的免费域名daoapp.io配备了泛域名证书，服务器在国内延迟低带宽大，天生就是Docker在国内的好伙伴，所以就开始部署！\r\n进入DaoCloud控制台选择代码构建-创建新项目导入我Github的代码源。这里有一点需要注意，执行环境要选择国外，我也不知道为什么我选择北京 BGP每次构建都会失败。可能一些资源被墙掉了，当然这地点也不重要，最终代码都会部署到国内。导入后需要在DaoCloud构建代码，等待执行成功后就可以在镜像仓库-我的仓库看到了。然后选择部署最新版本-运行环境-DaoCloud即可，不用绑定Volume(如需修改代码也可以绑定到/app)。然后起个好听的域名就OK了！\r\n使用方法很简单，将微博图床链接`http://ww1.sinaimg.cn/large/863bb56fgw1f3r5e627m9g20jg08cwej.gif`改成`https://sinaimg.daoapp.io/ww1.sinaimg.cn/large/863bb56fgw1f3r5e627m9g20jg08cwej.gif`就能使用了。\r\n这个图床有如下几个非常好的特性：\r\n- 首先就是支持 HTTPS\r\n- 之前上传的图片直接修改链接直接就可以使用\r\n- 微博图床各种方便的上传插件还能继续用\r\n- 这个图床依托两个很靠谱的平台，新浪和 DaoCloud\r\n- 可以用 Dockerfile 一键部署在自己的服务器\r\n- 开源\r\n\r\n****\r\nP.S.\r\n- [一个非常好用的正则调试工具](https://regex101.com/#python)\r\n- 部署Docker `docker pull yuxio/uwsgi-nginx-flask-docker-for-sinaimg`\r\n- 将微博图床链接中ww1改成ws1后再加入https可直接避免浏览器不信任警告，但仍为不安全连接，地址栏https为白色。\r\n- [一个非常好用的微博图床Chrome插件](https://chrome.google.com/webstore/detail/fdfdnfpdplfbbnemmmoklbfjbhecpnhf)\r\n- [一个非常好用的图片压缩工具](https://tinypng.com/)\r\n- [项目的Github源](https://github.com/YUX-IO/uwsgi-nginx-flask-docker-for-sinaimg)，求Star✨♪(^∇^*)\r\n- [项目的DockerHub源](https://hub.docker.com/r/yuxio/uwsgi-nginx-flask-docker-for-sinaimg/)\r\n- Acknowledgements 致谢\r\n    - [tiangolo/uwsgi-nginx:latest](https://github.com/tiangolo/uwsgi-nginx-docker)\r\n    - [DaoCloud](https://www.daocloud.io)\r\n    - [Weibo](http://weibo.com)\r\n    - [v2ex](https://v2ex.com)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}